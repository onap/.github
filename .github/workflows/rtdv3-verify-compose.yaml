---
name: Composeable Required rtdv3 Verify

# yamllint disable-line rule:truthy
on:
  workflow_call:
    inputs:
      GERRIT_BRANCH:
        description: "Branch that change is against"
        required: true
        type: string
      GERRIT_CHANGE_ID:
        description: "The ID for the change"
        required: true
        type: string
      GERRIT_CHANGE_NUMBER:
        description: "The Gerrit number"
        required: true
        type: string
      GERRIT_CHANGE_URL:
        description: "URL to the change"
        required: true
        type: string
      GERRIT_EVENT_TYPE:
        description: "Type of Gerrit event"
        required: true
        type: string
      GERRIT_PATCHSET_NUMBER:
        description: "The patch number for the change"
        required: true
        type: string
      GERRIT_PATCHSET_REVISION:
        description: "The revision sha"
        required: true
        type: string
      GERRIT_PROJECT:
        description: "Project in Gerrit"
        required: true
        type: string
      GERRIT_REFSPEC:
        description: "Gerrit refspec of change"
        required: true
        type: string
      TARGET_REPO:
        # yamllint disable-line rule:line-length
        description: "The target GitHub repository needing the required workflow"
        required: true
        type: string
    secrets:
      RTD_TOKEN:
        description: "RTD API user token"
        required: true
      GERRIT_SSH_REQUIRED_PRIVKEY:
        description: "SSH Key for the authorized user account"
        required: true

concurrency:
  # yamllint disable-line rule:line-length
  group: compose-required-rtdv3-${{ github.workflow }}-${{ github.event.inputs.GERRIT_CHANGE_ID || github.run_id }}
  cancel-in-progress: true

env:
  READTHEDOCS_FOUND: true
  TOX_ENVS: docs,docs-linkcheck
  TOX_DIR: docs/
  DOC_DIR: _build/html
  PARALLEL: true
  DEFAULT_VERSION: latest
  MASTER_RTD_PROJECT: doc

jobs:
  rtd-validation:
    runs-on: ubuntu-latest
    steps:
      - uses: lfit/checkout-gerrit-change-action@v0.4
        with:
          gerrit-refspec: ${{ inputs.GERRIT_REFSPEC }}
          delay: "0s"
          repository: ${{ inputs.TARGET_REPO }}
          ref: refs/heads/${{ inputs.GERRIT_BRANCH }}
      - uses: actions/setup-python@v4
        id: setup-python
        with:
          python-version: "3.11"
      - name: Clone git submodules
        run: git submodule update --init
      - name: Verify If readthedocs Config exists
        run: |
          echo "Verifying if readthedocs.yaml config file exists"
          if [ ! -d .readthedocs.yaml ] ; then
            echo "INFO Config file not found. Skipping further checks."
            echo "READTHEDOCS_FOUND=false" >> "$GITHUB_ENV"
          fi
      - name: Installing dependencies
        if: ${{ env.READTHEDOCS_FOUND == 'true' }}
        run: |
          python -m pip install --upgrade pip
          pip install lftools niet~=1.4.2 cryptography<3.4 yq tox
          # urllib3 needs to be pinned to avoid timeouts
          pip install --upgrade urllib3~=1.26.15
          mkdir -p "${GITHUB_WORKSPACE}/.config/lftools/lftools.ini"
          cat << EOF > "${GITHUB_WORKSPACE}/.config/lftools/lftools.ini"
          [rtd]
          endpoint=https://readthedocs.org/api/v3/
          token=${{ secrets.RTD_TOKEN }}
          EOF
      - name: Running tox
        # yamllint disable rule:line-length
        if: ${{ env.READTHEDOCS_FOUNF == 'true' }}
        run: |
          PATH="${GITHUB_WORKSPACE}/.local/bin:${PATH}"

          ARCHIVE_TOX_DIR="${GITHUB_WORKSPACE}/archives/tox"
          ARCHIVE_DOC_DIR="${GITHUB_WORKSPACE}/archives/docs"
          mkdir -p "$ARCHIVE_TOX_DIR"
          cd "${GITHUB_WORKSPACE}/${TOX_DIR}" || exit 1

          if [[ -d /opt/pyenv ]]; then
              echo "---> Setting up pyenv"
              export PYENV_ROOT="/opt/pyenv"
              export PATH="$PYENV_ROOT/bin:$PATH"
              PYTHONPATH="$(pwd)"
              export PYTHONPATH
              export TOX_TESTENV_PASSENV=PYTHONPATH
          fi

          #Useful debug
          tox --version

          PARALLEL=${{ env.PARALLEL:-true }}
          TOX_OPTIONS_LIST=""

          if [[ -n ${{ env.TOX_ENVS:- }} ]]; then
              TOX_OPTIONS_LIST=${TOX_OPTIONS_LIST}" -e ${{ env.TOX_ENVS }}"
          fi;

          case ${PARALLEL,,} in
              true|auto )
                  TOX_OPTIONS_LIST=$TOX_OPTIONS_LIST" --parallel auto --parallel-live";;
              all )
                  TOX_OPTIONS_LIST=$TOX_OPTIONS_LIST" --parallel all --parallel-live";;
              [0-9]* )
                  TOX_OPTIONS_LIST=$TOX_OPTIONS_LIST" --parallel ${PARALLEL} --parallel-live";;
          esac

          # $TOX_OPTIONS_LIST are intentionnaly not surrounded by quotes
          # to correcly pass options to tox
          # shellcheck disable=SC2086
          tox $TOX_OPTIONS_LIST | tee -a "$ARCHIVE_TOX_DIR/tox.log"
          tox_status="${PIPESTATUS[0]}"

          echo "---> Completed tox runs"

          # Disable SC2116 as we want to echo a space separated list of TOX_ENVS
          # shellcheck disable=SC2116
          for i in .tox/*/log; do
              tox_env=$(echo "$i" | awk -F'/' '{print $2}')
              # defend against glob finding no matches
              if ! cp -r "$i" "$ARCHIVE_TOX_DIR/$tox_env"; then
                  echo "WARN: no logs found to archive"
                  break
              fi
          done

          # If docs are generated push them to archives.
          DOC_DIR=${{ env.DOC_DIR:-docs/_build/html }}
          if [[ -d $DOC_DIR ]]; then
              echo "---> Archiving generated docs"
              mv "$DOC_DIR" "$ARCHIVE_DOC_DIR"
          fi

          echo "---> tox-run.sh ends"

          test "$tox_status" -eq 0 || exit "$tox_status"

      - name: Running rtdv3
        if: ${{ env.READTHEDOCS_FOUND == 'true' }}
        run: |

          echo "---> Running rtdv3"
          set -euo pipefail

          watchbuild(){
              echo "INFO: Running build against branch $1"
              local buildid
              local result
              buildid=$(lftools rtd project-build-trigger "$rtdproject" "$1" | jq '.build.id')

              result=null
              while [[ "$result" == null ]]; do
                  sleep 10
                  result=$(lftools rtd project-build-details "$rtdproject" "$buildid"  | jq '.success')
                  echo "INFO Current result of running build $result"
                  if [[ $result == failed ]]; then
                      echo "INFO: read the docs build completed with status: $result"
                      exit 1
                  fi
              done
              echo "INFO: read the docs build completed with status: $result"
          }

          project_dashed="${${{ inputs.GERRIT_PROJECT }}////-}"
          umbrella=$(echo ${{ inputs.GERRIT_CHANGE_URL }} | awk -F'.' '{print $2}')
          rtdproject="$umbrella-$project_dashed"

          #MASTER_RTD_PROJECT as a global jenkins cnt
          masterproject=${umbrella}-${{ env.MASTER_RTD_PROJECT }}

          #Exceptions needed for onap, due to importing their old docs.
          if [[ $masterproject == "onap-doc" ]]; then
              masterproject="onap"
          fi
          if [[ $rtdproject == "onap-doc" ]]; then
              rtdproject="onap"
          fi

          echo "INFO:"
          echo "INFO: Project: ${{ inputs.GERRIT_PROJECT }}"
          echo "INFO: Read the Docs Sub Project: https://$rtdproject.readthedocs.io"
          echo "INFO: Read the Docs Master Project: https://$masterproject.readthedocs.io"

          if [[ "$(lftools rtd project-details "$rtdproject" | yq -r '.detail')" == "Not found." ]]; then
              echo "INFO: Project not found, merge will create project https://$rtdproject.readthedocs.io"
          fi
          echo "INFO: Verify job completed"
